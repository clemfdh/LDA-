{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# apply LDA to a set of documents and split them into topics# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /Users/clement/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import gensim\n",
    "from gensim.utils import simple_preprocess\n",
    "from gensim.parsing.preprocessing import STOPWORDS\n",
    "from nltk.stem import WordNetLemmatizer, SnowballStemmer\n",
    "from nltk.stem.porter import *\n",
    "import numpy as np\n",
    "np.random.seed(2018)\n",
    "import nltk\n",
    "nltk.download('wordnet')\n",
    "from gensim import corpora, models\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DATA: Kaggle; https://www.kaggle.com/therohk/million-headlines/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>headline_text</th>\n",
       "      <th>index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>aba decides against community broadcasting lic...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>act fire witnesses must be aware of defamation</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a g calls for infrastructure protection summit</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>air nz staff in aust strike for pay rise</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>air nz strike to affect australian travellers</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       headline_text  index\n",
       "0  aba decides against community broadcasting lic...      0\n",
       "1     act fire witnesses must be aware of defamation      1\n",
       "2     a g calls for infrastructure protection summit      2\n",
       "3           air nz staff in aust strike for pay rise      3\n",
       "4      air nz strike to affect australian travellers      4"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = pd.read_csv('data/abcnews-date-text.csv', error_bad_lines=False)\n",
    "data = dt[['headline_text']]\n",
    "data['index']=data.index\n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tokenization: splitting the text (english) into words for a non-english language"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lemmatization: reduce inflectional forms and sometimes derivationally related forms of a word to a common base form."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lemmatize_stemming(text):\n",
    "    ps = PorterStemmer()\n",
    "    return ps.stem(WordNetLemmatizer().lemmatize(text, pos='v'))\n",
    "\n",
    "def preprocess(text):\n",
    "    result = []\n",
    "    #remove all stopword, words with less than 3 char\n",
    "    for token in gensim.utils.simple_preprocess(text):\n",
    "        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3:\n",
    "            result.append(lemmatize_stemming(token))\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "test on the first headline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['aba', 'decides', 'against', 'community', 'broadcasting', 'licence']\n",
      "['decid', 'commun', 'broadcast', 'licenc']\n"
     ]
    }
   ],
   "source": [
    "doc_sample = data[:1].values[0][0]\n",
    "doc_sample\n",
    "words=[]\n",
    "for i in doc_sample.split(' '):\n",
    "    words.append(i)\n",
    "print(words)    \n",
    "print (preprocess(doc_sample))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        [decid, commun, broadcast, licenc]\n",
      "1                        [wit, awar, defam]\n",
      "2    [call, infrastructur, protect, summit]\n",
      "3               [staff, aust, strike, rise]\n",
      "4      [strike, affect, australian, travel]\n",
      "Name: headline_text, dtype: object\n"
     ]
    }
   ],
   "source": [
    "processed_docs = data['headline_text'].map(preprocess)\n",
    "print(processed_docs[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "dct = gensim.corpora.Dictionary(processed_docs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are filtering out words that appears is less than 15 docs, more than 0.5, keeping the 100000 first ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "bow_corpus = [dct.doc2bow(doc) for doc in processed_docs]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of TF_IDF (text freq, inversed text freq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fit model\n",
    "tfidf = models.TfidfModel(bow_corpus)\n",
    "#apply model \n",
    "vector = tfidf[bow_corpus]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0, 0.5903602896750699),\n",
       " (1, 0.38524510107363613),\n",
       " (2, 0.4974556071174764),\n",
       " (3, 0.5055678583740412)]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vector[0][::]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_model = gensim.models.LdaMulticore(bow_corpus, num_topics=10, id2word=dct, passes=2, workers=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic: 0 \n",
      "Words: 0.023*\"adelaid\" + 0.018*\"test\" + 0.013*\"brisban\" + 0.013*\"deal\" + 0.012*\"final\" + 0.011*\"australia\" + 0.010*\"say\" + 0.009*\"john\" + 0.009*\"meet\" + 0.008*\"shark\"\n",
      "Topic: 1 \n",
      "Words: 0.021*\"elect\" + 0.017*\"govern\" + 0.016*\"countri\" + 0.014*\"say\" + 0.014*\"tasmanian\" + 0.013*\"canberra\" + 0.013*\"hour\" + 0.013*\"labor\" + 0.012*\"chang\" + 0.010*\"support\"\n",
      "Topic: 2 \n",
      "Words: 0.023*\"report\" + 0.017*\"interview\" + 0.016*\"donald\" + 0.015*\"attack\" + 0.015*\"kill\" + 0.015*\"live\" + 0.013*\"island\" + 0.012*\"protest\" + 0.012*\"return\" + 0.010*\"releas\"\n",
      "Topic: 3 \n",
      "Words: 0.040*\"australian\" + 0.031*\"trump\" + 0.016*\"die\" + 0.014*\"miss\" + 0.014*\"open\" + 0.013*\"world\" + 0.012*\"leav\" + 0.012*\"year\" + 0.012*\"crash\" + 0.011*\"children\"\n",
      "Topic: 4 \n",
      "Words: 0.022*\"market\" + 0.015*\"share\" + 0.013*\"train\" + 0.012*\"polit\" + 0.012*\"farm\" + 0.012*\"close\" + 0.012*\"royal\" + 0.012*\"senat\" + 0.011*\"green\" + 0.011*\"victorian\"\n",
      "Topic: 5 \n",
      "Words: 0.044*\"polic\" + 0.026*\"charg\" + 0.025*\"court\" + 0.021*\"death\" + 0.019*\"murder\" + 0.016*\"face\" + 0.014*\"jail\" + 0.013*\"accus\" + 0.013*\"shoot\" + 0.012*\"woman\"\n",
      "Topic: 6 \n",
      "Words: 0.023*\"nation\" + 0.021*\"school\" + 0.016*\"tasmania\" + 0.014*\"turnbul\" + 0.014*\"water\" + 0.014*\"coast\" + 0.014*\"peopl\" + 0.013*\"break\" + 0.013*\"gold\" + 0.012*\"victoria\"\n",
      "Topic: 7 \n",
      "Words: 0.015*\"help\" + 0.015*\"council\" + 0.013*\"health\" + 0.013*\"rural\" + 0.013*\"plan\" + 0.012*\"fund\" + 0.012*\"rise\" + 0.011*\"indigen\" + 0.011*\"commun\" + 0.010*\"govern\"\n",
      "Topic: 8 \n",
      "Words: 0.027*\"queensland\" + 0.027*\"australia\" + 0.023*\"south\" + 0.021*\"north\" + 0.014*\"west\" + 0.009*\"korea\" + 0.008*\"marriag\" + 0.008*\"make\" + 0.008*\"flood\" + 0.008*\"western\"\n",
      "Topic: 9 \n",
      "Words: 0.015*\"win\" + 0.012*\"worker\" + 0.011*\"citi\" + 0.010*\"week\" + 0.010*\"trial\" + 0.009*\"build\" + 0.009*\"australia\" + 0.009*\"season\" + 0.008*\"premier\" + 0.008*\"trade\"\n"
     ]
    }
   ],
   "source": [
    "for idx, topic in lda_model.print_topics():\n",
    "    print('Topic: {} \\nWords: {}'.format(idx, topic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_model_tfidf = gensim.models.LdaMulticore(vector, num_topics=10, id2word=dct, passes=2, workers=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic: 0 Word: 0.008*\"health\" + 0.007*\"fund\" + 0.006*\"govern\" + 0.006*\"sport\" + 0.005*\"emerg\" + 0.005*\"servic\" + 0.005*\"budget\" + 0.005*\"mental\" + 0.005*\"centr\" + 0.004*\"tasmania\"\n",
      "Topic: 1 Word: 0.007*\"elect\" + 0.006*\"august\" + 0.006*\"export\" + 0.005*\"jam\" + 0.005*\"live\" + 0.004*\"outback\" + 0.004*\"candid\" + 0.004*\"scott\" + 0.004*\"liber\" + 0.004*\"age\"\n",
      "Topic: 2 Word: 0.019*\"trump\" + 0.014*\"news\" + 0.013*\"rural\" + 0.010*\"drum\" + 0.009*\"donald\" + 0.007*\"ash\" + 0.006*\"nation\" + 0.005*\"wrap\" + 0.004*\"great\" + 0.004*\"insid\"\n",
      "Topic: 3 Word: 0.015*\"crash\" + 0.008*\"grandstand\" + 0.007*\"die\" + 0.006*\"truck\" + 0.006*\"fatal\" + 0.005*\"teenag\" + 0.005*\"plane\" + 0.005*\"driver\" + 0.004*\"injur\" + 0.004*\"shark\"\n",
      "Topic: 4 Word: 0.006*\"chang\" + 0.005*\"climat\" + 0.005*\"asylum\" + 0.005*\"tuesday\" + 0.005*\"govern\" + 0.005*\"thursday\" + 0.005*\"council\" + 0.005*\"plan\" + 0.004*\"seeker\" + 0.004*\"say\"\n",
      "Topic: 5 Word: 0.015*\"charg\" + 0.014*\"polic\" + 0.014*\"murder\" + 0.010*\"court\" + 0.009*\"woman\" + 0.008*\"assault\" + 0.008*\"turnbul\" + 0.007*\"alleg\" + 0.007*\"death\" + 0.007*\"jail\"\n",
      "Topic: 6 Word: 0.009*\"queensland\" + 0.006*\"rain\" + 0.006*\"violenc\" + 0.006*\"michael\" + 0.006*\"live\" + 0.006*\"farm\" + 0.005*\"domest\" + 0.005*\"flood\" + 0.005*\"gener\" + 0.005*\"marriag\"\n",
      "Topic: 7 Word: 0.021*\"countri\" + 0.019*\"hour\" + 0.015*\"market\" + 0.009*\"share\" + 0.008*\"christma\" + 0.006*\"drive\" + 0.006*\"australian\" + 0.006*\"abbott\" + 0.006*\"monday\" + 0.006*\"wednesday\"\n",
      "Topic: 8 Word: 0.008*\"kill\" + 0.006*\"attack\" + 0.005*\"bomb\" + 0.005*\"syria\" + 0.005*\"islam\" + 0.005*\"protest\" + 0.004*\"suicid\" + 0.004*\"mount\" + 0.004*\"polic\" + 0.004*\"energi\"\n",
      "Topic: 9 Word: 0.009*\"podcast\" + 0.009*\"australia\" + 0.008*\"weather\" + 0.008*\"world\" + 0.008*\"interview\" + 0.006*\"leagu\" + 0.005*\"septemb\" + 0.005*\"test\" + 0.005*\"rugbi\" + 0.005*\"cricket\"\n"
     ]
    }
   ],
   "source": [
    "for idx, topic in lda_model_tfidf.print_topics(-1):\n",
    "    print('Topic: {} Word: {}'.format(idx, topic))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Score: 0.36919108033180237\t \n",
      "Topic: 0.044*\"polic\" + 0.026*\"charg\" + 0.025*\"court\" + 0.021*\"death\" + 0.019*\"murder\" + 0.016*\"face\" + 0.014*\"jail\" + 0.013*\"accus\" + 0.013*\"shoot\" + 0.012*\"woman\"\n",
      "\n",
      "Score: 0.2708074748516083\t \n",
      "Topic: 0.015*\"help\" + 0.015*\"council\" + 0.013*\"health\" + 0.013*\"rural\" + 0.013*\"plan\" + 0.012*\"fund\" + 0.012*\"rise\" + 0.011*\"indigen\" + 0.011*\"commun\" + 0.010*\"govern\"\n",
      "\n",
      "Score: 0.2199949473142624\t \n",
      "Topic: 0.027*\"queensland\" + 0.027*\"australia\" + 0.023*\"south\" + 0.021*\"north\" + 0.014*\"west\" + 0.009*\"korea\" + 0.008*\"marriag\" + 0.008*\"make\" + 0.008*\"flood\" + 0.008*\"western\"\n",
      "\n",
      "Score: 0.020005086436867714\t \n",
      "Topic: 0.023*\"nation\" + 0.021*\"school\" + 0.016*\"tasmania\" + 0.014*\"turnbul\" + 0.014*\"water\" + 0.014*\"coast\" + 0.014*\"peopl\" + 0.013*\"break\" + 0.013*\"gold\" + 0.012*\"victoria\"\n",
      "\n",
      "Score: 0.02000138722360134\t \n",
      "Topic: 0.021*\"elect\" + 0.017*\"govern\" + 0.016*\"countri\" + 0.014*\"say\" + 0.014*\"tasmanian\" + 0.013*\"canberra\" + 0.013*\"hour\" + 0.013*\"labor\" + 0.012*\"chang\" + 0.010*\"support\"\n",
      "\n",
      "Score: 0.019999999552965164\t \n",
      "Topic: 0.023*\"adelaid\" + 0.018*\"test\" + 0.013*\"brisban\" + 0.013*\"deal\" + 0.012*\"final\" + 0.011*\"australia\" + 0.010*\"say\" + 0.009*\"john\" + 0.009*\"meet\" + 0.008*\"shark\"\n",
      "\n",
      "Score: 0.019999999552965164\t \n",
      "Topic: 0.023*\"report\" + 0.017*\"interview\" + 0.016*\"donald\" + 0.015*\"attack\" + 0.015*\"kill\" + 0.015*\"live\" + 0.013*\"island\" + 0.012*\"protest\" + 0.012*\"return\" + 0.010*\"releas\"\n",
      "\n",
      "Score: 0.019999999552965164\t \n",
      "Topic: 0.040*\"australian\" + 0.031*\"trump\" + 0.016*\"die\" + 0.014*\"miss\" + 0.014*\"open\" + 0.013*\"world\" + 0.012*\"leav\" + 0.012*\"year\" + 0.012*\"crash\" + 0.011*\"children\"\n",
      "\n",
      "Score: 0.019999999552965164\t \n",
      "Topic: 0.022*\"market\" + 0.015*\"share\" + 0.013*\"train\" + 0.012*\"polit\" + 0.012*\"farm\" + 0.012*\"close\" + 0.012*\"royal\" + 0.012*\"senat\" + 0.011*\"green\" + 0.011*\"victorian\"\n",
      "\n",
      "Score: 0.019999999552965164\t \n",
      "Topic: 0.015*\"win\" + 0.012*\"worker\" + 0.011*\"citi\" + 0.010*\"week\" + 0.010*\"trial\" + 0.009*\"build\" + 0.009*\"australia\" + 0.009*\"season\" + 0.008*\"premier\" + 0.008*\"trade\"\n",
      "\n",
      "\n",
      "-----------------------------------------------------------\n",
      "\n",
      "\n",
      "\n",
      "Score: 0.5314541459083557\t \n",
      "Topic: 0.008*\"health\" + 0.007*\"fund\" + 0.006*\"govern\" + 0.006*\"sport\" + 0.005*\"emerg\" + 0.005*\"servic\" + 0.005*\"budget\" + 0.005*\"mental\" + 0.005*\"centr\" + 0.004*\"tasmania\"\n",
      "\n",
      "Score: 0.3085397481918335\t \n",
      "Topic: 0.009*\"queensland\" + 0.006*\"rain\" + 0.006*\"violenc\" + 0.006*\"michael\" + 0.006*\"live\" + 0.006*\"farm\" + 0.005*\"domest\" + 0.005*\"flood\" + 0.005*\"gener\" + 0.005*\"marriag\"\n",
      "\n",
      "Score: 0.020001422613859177\t \n",
      "Topic: 0.006*\"chang\" + 0.005*\"climat\" + 0.005*\"asylum\" + 0.005*\"tuesday\" + 0.005*\"govern\" + 0.005*\"thursday\" + 0.005*\"council\" + 0.005*\"plan\" + 0.004*\"seeker\" + 0.004*\"say\"\n",
      "\n",
      "Score: 0.02000095322728157\t \n",
      "Topic: 0.008*\"kill\" + 0.006*\"attack\" + 0.005*\"bomb\" + 0.005*\"syria\" + 0.005*\"islam\" + 0.005*\"protest\" + 0.004*\"suicid\" + 0.004*\"mount\" + 0.004*\"polic\" + 0.004*\"energi\"\n",
      "\n",
      "Score: 0.02000090666115284\t \n",
      "Topic: 0.019*\"trump\" + 0.014*\"news\" + 0.013*\"rural\" + 0.010*\"drum\" + 0.009*\"donald\" + 0.007*\"ash\" + 0.006*\"nation\" + 0.005*\"wrap\" + 0.004*\"great\" + 0.004*\"insid\"\n",
      "\n",
      "Score: 0.020000869408249855\t \n",
      "Topic: 0.021*\"countri\" + 0.019*\"hour\" + 0.015*\"market\" + 0.009*\"share\" + 0.008*\"christma\" + 0.006*\"drive\" + 0.006*\"australian\" + 0.006*\"abbott\" + 0.006*\"monday\" + 0.006*\"wednesday\"\n",
      "\n",
      "Score: 0.02000078558921814\t \n",
      "Topic: 0.015*\"charg\" + 0.014*\"polic\" + 0.014*\"murder\" + 0.010*\"court\" + 0.009*\"woman\" + 0.008*\"assault\" + 0.008*\"turnbul\" + 0.007*\"alleg\" + 0.007*\"death\" + 0.007*\"jail\"\n",
      "\n",
      "Score: 0.020000465214252472\t \n",
      "Topic: 0.015*\"crash\" + 0.008*\"grandstand\" + 0.007*\"die\" + 0.006*\"truck\" + 0.006*\"fatal\" + 0.005*\"teenag\" + 0.005*\"plane\" + 0.005*\"driver\" + 0.004*\"injur\" + 0.004*\"shark\"\n",
      "\n",
      "Score: 0.020000392571091652\t \n",
      "Topic: 0.007*\"elect\" + 0.006*\"august\" + 0.006*\"export\" + 0.005*\"jam\" + 0.005*\"live\" + 0.004*\"outback\" + 0.004*\"candid\" + 0.004*\"scott\" + 0.004*\"liber\" + 0.004*\"age\"\n",
      "\n",
      "Score: 0.020000312477350235\t \n",
      "Topic: 0.009*\"podcast\" + 0.009*\"australia\" + 0.008*\"weather\" + 0.008*\"world\" + 0.008*\"interview\" + 0.006*\"leagu\" + 0.005*\"septemb\" + 0.005*\"test\" + 0.005*\"rugbi\" + 0.005*\"cricket\"\n"
     ]
    }
   ],
   "source": [
    "processed_docs[0]\n",
    "#using bag of word\n",
    "for index, score in sorted(lda_model[bow_corpus[4310]], key=lambda tup: -1*tup[1]):\n",
    "    print(\"\\nScore: {}\\t \\nTopic: {}\".format(score, lda_model.print_topic(index, 10)))\n",
    "#using LDA TF-IDF model\n",
    "print('\\n\\n-----------------------------------------------------------\\n\\n')\n",
    "for index, score in sorted(lda_model_tfidf[bow_corpus[4310]], key=lambda tup: -1*tup[1]):\n",
    "    print(\"\\nScore: {}\\t \\nTopic: {}\".format(score, lda_model_tfidf.print_topic(index, 10)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score: 0.5180546641349792\t Topic: 0.015*\"win\" + 0.012*\"worker\" + 0.011*\"citi\" + 0.010*\"week\" + 0.010*\"trial\"\n",
      "Score: 0.28192955255508423\t Topic: 0.044*\"polic\" + 0.026*\"charg\" + 0.025*\"court\" + 0.021*\"death\" + 0.019*\"murder\"\n",
      "Score: 0.025005633011460304\t Topic: 0.040*\"australian\" + 0.031*\"trump\" + 0.016*\"die\" + 0.014*\"miss\" + 0.014*\"open\"\n",
      "Score: 0.025002997368574142\t Topic: 0.027*\"queensland\" + 0.027*\"australia\" + 0.023*\"south\" + 0.021*\"north\" + 0.014*\"west\"\n",
      "Score: 0.02500239573419094\t Topic: 0.023*\"report\" + 0.017*\"interview\" + 0.016*\"donald\" + 0.015*\"attack\" + 0.015*\"kill\"\n",
      "Score: 0.025001445785164833\t Topic: 0.015*\"help\" + 0.015*\"council\" + 0.013*\"health\" + 0.013*\"rural\" + 0.013*\"plan\"\n",
      "Score: 0.025001199916005135\t Topic: 0.023*\"nation\" + 0.021*\"school\" + 0.016*\"tasmania\" + 0.014*\"turnbul\" + 0.014*\"water\"\n",
      "Score: 0.025000840425491333\t Topic: 0.022*\"market\" + 0.015*\"share\" + 0.013*\"train\" + 0.012*\"polit\" + 0.012*\"farm\"\n",
      "Score: 0.0250008013099432\t Topic: 0.021*\"elect\" + 0.017*\"govern\" + 0.016*\"countri\" + 0.014*\"say\" + 0.014*\"tasmanian\"\n",
      "Score: 0.025000490248203278\t Topic: 0.023*\"adelaid\" + 0.018*\"test\" + 0.013*\"brisban\" + 0.013*\"deal\" + 0.012*\"final\"\n"
     ]
    }
   ],
   "source": [
    "unseen_document = 'new olympic champion get in jail'\n",
    "bow_vector = dct.doc2bow(preprocess(unseen_document))\n",
    "for index, score in sorted(lda_model_tfidf[bow_vector], key=lambda tup: -1*tup[1]):\n",
    "    print(\"Score: {}\\t Topic: {}\".format(score, lda_model.print_topic(index, 5)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
